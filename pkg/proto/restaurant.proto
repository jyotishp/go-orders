syntax = "proto3";
package protos;
option go_package="pkg/proto";
import "google/api/annotations.proto";
import "utils.proto";

// Items Filter
message ItemsFilter {
  int32 restaurant_id = 1;
  int32 min = 2;
  int32 max = 3;
}

// Item ID
message ItemId {
  int32 item_id = 1;
  int32 restaurant_id = 2;
}

// Create Item Parameters
message CreateItemParams {
  string name = 1;
  float amount = 2;
  float discount = 3;
  string cuisine = 4;
}

// Create Item
message CreateItem {
  int32 restaurant_id = 1;
  CreateItemParams item = 2;
}

// Update Item
message UpdateItem {
  int32 item_id = 1;
  int32 restaurant_id = 2;
  CreateItemParams item = 3;
}

// Restaurant Name
message RestaurantName {
  string restaurant_name = 1;
}

// Restaurant ID
message RestaurantId {
  int32 restaurant_id = 1;
}

// Create Restaurant
message CreateRestaurant {
  string name = 1;
  Address address = 2;
}

// Update Restaurant
message UpdateRestaurant {
  int32 restaurant_id = 1;
  CreateRestaurant restaurant = 2;
}

// List of Restaurants
message RestaurantList {
  repeated Restaurant restaurants = 1;
}

service Restaurants {
  // Get a restaurant given its ID
  rpc GetRestaurant(RestaurantId) returns (Restaurant) {
    option (google.api.http) = {
      get: "/v1/restaurants/{restaurant_id}"
    };
  }

  // Get all restaurants of a given name
  rpc GetRestaurantName(RestaurantName) returns (RestaurantList) {
    option (google.api.http) = {
      get: "/v1/restaurantsByName/{restaurant_name}"
    };
  }

  // Create a new restaurant
  rpc PostRestaurant(CreateRestaurant) returns (Restaurant) {
    option (google.api.http) = {
      post: "/v1/restaurants",
      body: "*"
    };
  }

  // Update a restaurant given its ID
  rpc PutRestaurant(UpdateRestaurant) returns (Restaurant) {
    option (google.api.http) = {
      put: "/v1/restaurants/{restaurant_id}",
      body: "restaurant"
    };
  }

  // Delete a restaurant given its ID
  rpc DeleteRestaurant(RestaurantId) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/restaurants/{restaurant_id}"
    };
  }

  // List items of available in a restaurant
  rpc ListItems(ItemsFilter) returns (ItemList) {
    option (google.api.http) = {
      get: "/v1/restaurants/{restaurant_id}/items"
    };
  }

  // Get a item of a restaurant
  rpc GetItem(ItemId) returns (Item) {
    option (google.api.http) = {
      get: "/v1/restaurants/{restaurant_id}/items/{item_id}"
    };
  }

  // Add an item to a restaurant
  rpc PostItem(CreateItem) returns (Item) {
    option (google.api.http) = {
      post: "/v1/restaurants/{restaurant_id}/items",
      body: "item"
    };
  }

  // Update an item of a restaurant
  rpc PutItem(UpdateItem) returns (Item) {
    option (google.api.http) = {
      put: "/v1/restaurants/{restaurant_id}/items/{item_id}",
      body: "item"
    };
  }

  // Delete an item from the restaurant
  rpc DeleteItem(ItemId) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/restaurants/{restaurant_id}/items/{item_id}"
    };
  }
}